@page "/transactions"
@using MudBlazor
@using PFT.Web.Services
@inject ITransactionService TransactionService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4" Class="mb-4">Transactions</MudText>

<MudTable Items="@_transactions" Hover="true" Breakpoint="Breakpoint.None">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All Transactions</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add" 
                   OnClick="() => NavigationManager.NavigateTo("/add-income")">
            Add Income
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="ml-2"
                   StartIcon="@Icons.Material.Filled.Add" 
                   OnClick="() => NavigationManager.NavigateTo("/add-expense")">
            Add Expense
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Category">@context.Category</MudTd>
        <MudTd DataLabel="Type">
            <MudChip Color="@(context.Type == "Income" ? Color.Success : Color.Error)" 
                     Variant="Variant.Filled" Size="Size.Small">
                @context.Type
            </MudChip>
        </MudTd>
        <MudTd DataLabel="Amount" Class="@(context.Type == "Income" ? "text-success" : "text-error")">
            @context.Amount.ToString("C")
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                           Color="Color.Primary" 
                           OnClick="@(e => EditTransaction(context.TransactionId))"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                           Color="Color.Error" 
                           OnClick="@(async e => await DeleteTransaction(context.TransactionId))"/>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IEnumerable<Transaction> _transactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
    }

    private async Task LoadTransactions()
    {
        try
        {
            _transactions = await TransactionService.GetTransactionsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading transactions: {ex.Message}", Severity.Error);
        }
    }

    private void EditTransaction(int id)
    {
        NavigationManager.NavigateTo($"/edit-transaction/{id}");
    }

    private async Task DeleteTransaction(int id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this transaction?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Transaction", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                await TransactionService.DeleteTransactionAsync(id);
                Snackbar.Add("Transaction deleted successfully", Severity.Success);
                await LoadTransactions();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting transaction: {ex.Message}", Severity.Error);
            }
        }
    }
}